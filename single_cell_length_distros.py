import os,sys,re
from collections import Counter

def cell_sort(percentages):
    '''Iterate through the percentages file generated by the scHi-C pipeline, and return a list
        of cell barcodes where the cell has >1000 unique reads and is 0.95 one species'''
    cells = {}
    ids = {}
    for line in percentages:
        #for each barcode combination in the percentages files
        hup, mup, huc, muc, val, tot, bc1, bc2, sig, length, ones, twos, threes, fours = line.split()
        if length == "Long": continue #Ignore the "Long"
        if sig == "Randomized": continue #and "randomized" lines
#        if float(hup) >= 0.95: #95% one species
        if int(huc) >= 1000: #at least 1000 reads                identity = ("human", huc)
        	identity = ("human", huc)
        	barcode = "%s-%s" % (bc1, bc2)
        	cells[barcode] = Counter() #hash the species type and coverage with the cell barcode
		ids[barcode] = identity
        #same applies for mouse cells
#        elif float(mup) >= 0.95:
        elif int(muc) >= 1000:
        	identity = ("mouse", muc)
                barcode = "%s-%s" % (bc1, bc2)
                cells[barcode] = Counter()
		ids[barcode] = identity
    return (cells, ids)

def single_cell_contacts(fhi, cell_contacts):
	for line in fhi:
		split = line.split()
		bc1 = split[11]
		bc2 = split[12]
		barcode = "%s-%s" % (bc1, bc2)
		if barcode in cell_contacts:
        		fcoord1 = int(split[1])
        		rcoord2 = int(split[5])
        		mapq1, mapq2 = int(split[7]), int(split[8])
			chr1 = split[0]
			chr2 = split[3]
        		species1 = split[0].split('_')[0]
       			species2 = split[3].split('_')[0]
        		if species1 != species2:
                		continue
			if chr1 != chr2:
				cell_contacts[barcode]["Interchromosomal"] += 1
			else:
				dist = abs(fcoord1 - rcoord2)
				if dist > 20000:
					cell_contacts[barcode][">20kb"] += 1
				elif 1000 <= dist <= 20000:
					cell_contacts[barcode]["1kb-20kb"] += 1
				else:
					cell_contacts[barcode]["<1kb"] += 1
	return cell_contacts

def main():
	percentages = open(sys.argv[1]) #positional argument #1 --> percentages file
	bedpe = open(sys.argv[2])       #positional argument #2 --> BEDPE file
	cells = cell_sort(percentages)
	percentages.close()
	cell_contacts = single_cell_contacts(bedpe, cells[0])
	bedpe.close()
	cellid = 1
	for barcode in cell_contacts:
		for entry in cell_contacts[barcode]:
			print "%s\t%s\t%s\t%s\t%s\t%s" % (sys.argv[3], barcode, entry, cell_contacts[barcode][entry], sum(cell_contacts[barcode].values()), cells[1][barcode][0])
		cellid += 1

if __name__ == "__main__":
	main()
